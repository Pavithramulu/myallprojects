import 'dart:async';
import 'dart:convert';
import 'package:api/Models/2.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Autogenerated> fetchAutogenerated() async {
  final response = await http.
  get(Uri.parse('https://api.genderize.io/?name=luc'));

  if(response.statusCode == 200) {
    return Autogenerated.fromJson(jsonDecode(response.body));
  } else {
    throw Exception('Failed to load ');
  }
}

class EmpDetails extends StatefulWidget {
  const EmpDetails({Key? key}) : super(key: key);

  @override
  State<EmpDetails> createState() => _EmpDetailsState();
}

class _EmpDetailsState extends State<EmpDetails> {
  @override
  void iniState() {
    super.initState();
     fetchAutogenerated();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('API Fetch Data Example'),
      ),
      body: Column(
        children: [
          Center(
            child: FutureBuilder<Autogenerated> (
              future:  fetchAutogenerated(),
              builder: (context,snapshot) {

                if (snapshot.hasData)
                {
                  return Text(snapshot.data!.name.toString(),
                    style:TextStyle(fontSize: 25,color: Colors.lightBlueAccent,fontWeight: FontWeight.w500),);
                }
              //  else (snapshot.hasError)
                {
                  return Text('${snapshot.error}',style: TextStyle(fontSize: 25),);
                }
                return const CircularProgressIndicator();
              }
            ),
          ),
          Center(
            child: FutureBuilder<Autogenerated> (
                future:  fetchAutogenerated(),
                builder: (context,snapshot) {

                  if (snapshot.hasData)
                  {
                    return Text(snapshot.data!.gender.toString(),
                      style:TextStyle(fontSize: 25,color: Colors.lightBlueAccent,fontWeight: FontWeight.w500),);
                  }
                  //  else (snapshot.hasError)
                      {
                    return Text('${snapshot.error}',style: TextStyle(fontSize: 25),);
                  }
                  return const CircularProgressIndicator();
                }
            ),
          ),
          Center(
            child: FutureBuilder<Autogenerated> (
                future:  fetchAutogenerated(),
                builder: (context,snapshot) {

                  if (snapshot.hasData)
                  {
                    return Text(snapshot.data!.count.toString(),
                      style:TextStyle(fontSize: 25,color: Colors.lightBlueAccent,fontWeight: FontWeight.w500),);
                  }
                  //  else (snapshot.hasError)
                      {
                    return Text('${snapshot.error}',style: TextStyle(fontSize: 25),);
                  }
                  return const CircularProgressIndicator();
                }
            ),
          ),
          Center(
            child: FutureBuilder<Autogenerated> (
                future:  fetchAutogenerated(),
                builder: (context,snapshot) {

                  if (snapshot.hasData)
                  {
                    return Text(snapshot.data!.probability.toString(),
                      style:TextStyle(fontSize: 25,color: Colors.lightBlueAccent,fontWeight: FontWeight.w500),);
                  }
                  //  else (snapshot.hasError)
                      {
                    return Text('${snapshot.error}',style: TextStyle(fontSize: 25),);
                  }
                  return const CircularProgressIndicator();
                }
            ),
          ),
        ],
      ),


    );
  }
}


